const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const { AureliaPlugin } = require('aurelia-webpack-plugin');
const { optimize: { CommonsChunkPlugin }, ProvidePlugin } = require('webpack');
const CleanWebpackPlugin = require('clean-webpack-plugin');
const FileManagerPlugin = require('filemanager-webpack-plugin');
// config helpers:
const ensureArray = (config) => config && (Array.isArray(config) ? config : [config]) || [];
const when = (condition, config, negativeConfig) =>
  condition ? ensureArray(config) : ensureArray(negativeConfig);
const prod = process.argv.indexOf('-p') !== -1;
// primary config:
const outDir = path.resolve(__dirname, 'dist/control');
const srcDir = path.resolve(__dirname, 'src');
const nodeModulesDir = path.resolve(__dirname, 'node_modules');
const baseUrl = '/';

const cssRules = [
  { loader: 'css-loader' },
  {
      loader: 'postcss-loader',
      options: { plugins: () => [require('autoprefixer')({ browsers: ['last 2 versions'] })] }
  }
]

/**
 * @return {webpack.Configuration}
 */
module.exports = ({
  production,
  server,
  extractCss,
  coverage
} = {}) => ({
  resolve: {
    extensions: ['.js'],
    modules: [srcDir, 'node_modules']
  },

  devtool: prod ? 'source-map' : 'cheap-module-eval-source-map',
  entry: {
    app: ['aurelia-bootstrapper']
  },
  output: {
    path: outDir,
    filename: '[name].bundle.js'
  },
  module: {
    rules: [
      // CSS required in JS/TS files should use the style-loader that auto-injects it into the website
      // only when the issuer is a .js/.ts file, so the loaders are not applied inside html templates
      {
        test: /\.css$/i,
        issuer: [{
          not: [{
            test: /\.html$/i
          }]
        }],
        use: extractCss ? ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: cssRules
        }) : ['style-loader', ...cssRules]
      },
      {
        test: /\.css$/i,
        issuer: [{
          test: /\.html$/i
        }],
        // CSS required in templates cannot be extracted safely
        // because Aurelia would try to require it again in runtime
        use: cssRules
      },
      {
        test: /\.scss$/,
        use: [{
          loader: 'style-loader'
        }, {
          loader: 'css-loader'
        }, {
          loader: 'sass-loader'
        }]
      },
      {
        test: /\.html$/i,
        loader: 'html-loader'
      },

      {
        test: /\.json$/i,
        loader: 'json-loader'
      },
      // embed small images and fonts as Data Urls and larger ones as files:
      {
        test: /\.(png|gif|jpg|cur)$/i,
        loader: 'url-loader',
        options: {
          limit: 8192
        }
      },
      {
        test: /\.woff2(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
        loader: 'url-loader',
        options: {
          limit: 10000,
          mimetype: 'application/font-woff2'
        }
      },
      {
        test: /\.woff(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
        loader: 'url-loader',
        options: {
          limit: 10000,
          mimetype: 'application/font-woff'
        }
      },
      // load these fonts normally, as files:
      {
        test: /\.(ttf|eot|svg|otf)(\?v=[0-9]\.[0-9]\.[0-9])?$/i,
        loader: 'file-loader'
      }
    ]
  },
  plugins: [
    new CleanWebpackPlugin(['dist']),
    new AureliaPlugin(),
    new HtmlWebpackPlugin({
      template: 'index.ejs',
      minify: prod ? {
        removeComments: true,
        collapseWhitespace: true
      } : undefined
    }),
    ...when(extractCss, new ExtractTextPlugin({
      filename: production ? '[contenthash].css' : '[id].css',
      allChunks: true
    })),
    new FileManagerPlugin({
      onEnd: {
        copy: [{
          source: './src/assets/**',
          destination: 'dist/assets'
        },
        {
          source: './src/i18n/**',
          destination: 'dist/control/i18n'
        },
        {
          source: './src/static/**.js',
          destination: 'dist/control/static'
        },
        {
          source: './src/manifest.json',
          destination: 'dist/manifest.json'
        }
        ]
        // zipping will be done in a separate build step after translation is done
        // archive: [
        //  { source: './dist/', destination: 'dist/{9C486530-D95A-4E6C-8605-87A8172070C4}.zip' }
        // ]
      }
    })
  ]
});
